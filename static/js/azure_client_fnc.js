
/**
@description: Retrieve the user from Azure AD B2C
@params uid - User ID generated by Azure AD B2C
@return - Returns
            Microsoft Graph User<businessPhones: string[]
                                displayName: string
                                givenName: string
                                id: string
                                jobTitle: string
                                mail: string
                                mobilePhone: string
                                officeLocation: string
                                preferredLanguage: string
                                surname: string
                                userPrincipalName: string>

*/
function retrieveUserProfile(uid) {
    return new Promise((resolve, reject) => {
        const xmlHttpRequest = new XMLHttpRequest();
        const url = "https://adb2c-user-management.azurewebsites.net/api/getUser/" + uid + "?code=cwdwE6CRbjjcfxNYWnanmqBF7M2DD0mIkRzoCbvikp8BJkdjPh3ODw==";
        xmlHttpRequest.open("GET", url);

        xmlHttpRequest.onreadystatechange = function(){
            if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200) {
                const ADUser = JSON.parse(xmlHttpRequest.responseText);
                resolve(ADUser);
                return;
            }
            if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status >= 400) {
                reject('Error processing request');
                return;
            }
        }
        xmlHttpRequest.send();
    });
}


/**
@description - Load all azure ADB2C users
@returns - Array of  Microsoft Graph User <businessPhones: string[]
                                displayName: string
                                givenName: string
                                id: string
                                jobTitle: string
                                mail: string
                                mobilePhone: string
                                officeLocation: string
                                preferredLanguage: string
                                surname: string
                                userPrincipalName: string>[]
*/
function loadADB2CUsers(){
    return new Promise((resolve, reject) => {
        let xmlHttpRequest = new XMLHttpRequest();
        const url = 'https://adb2c-user-management.azurewebsites.net/api/getUsers?code=1mDimR05fVAjsgfXUjdYIKNmyNIraaeO7vFTQg2smLDx/N6jZ1VYkw==';

        xmlHttpRequest.open("GET", url);
        xmlHttpRequest.onreadystatechange = function(){
             if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200) {
                const responseUsersObj = JSON.parse(xmlHttpRequest.responseText);
                resolve(responseUsersObj);
             }
             if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status >= 400) {
                reject('There was a problem processing your request');
                alert('There was a problem processing your request');
                return;
             }
        }
        xmlHttpRequest.send();
    });
}

/**
@description - delete an Azure AD B2C User
@params - uid is the string ID Generated by Azure AD B2C who represents the user to be deleted
*/
function deleteADB2CUser(uid='') {
    const xmlHttpRequest = new XMLHttpRequest();
    const url = 'https://adb2c-user-management.azurewebsites.net/api/deleteUser/' + uid +'?code=qom1KrDet96iRYoWYWjEob0WHFxk3h7BwMZHmhiHkOfCUSAan0pD3w==';
    xmlHttpRequest.open("GET", url);
    xmlHttpRequest.onreadystatechange = function(){
        if(xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200) {
            alert('User Successfully Deleted');
        }
        if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status >= 400){
            alert('There was a problem processing request.')
        }
    }
    xmlHttpRequest.send();

}

/**
@description - Create a Microsoft AD B2C User

@required params as keys of Microsoft Graph User Object - mail is the email address of the user (serves as username as well)
        - givenName is the first name of the user
        - surname is the last name of the user
        - employeeId is the unique ID
@optional params (all strings as keys of Microsoft Graph User object) - country, mobilePhone, streetAddress, state, jobTitle, mobilePhone, officeLocation
i.e. userObj {
                businessPhones: string[]
                displayName: string
                givenName: string
                jobTitle: string
                mail: string
                mobilePhone: string
                officeLocation: string
                preferredLanguage: string
                surname: string
                city: string,
                country: string,
                department: string,
                displayName: string,
                faxNumber: string,
                jobTitle: string,
                mailNickName: string,
                state: string,
                streetAddress: string
                employeeId: string
    }
*/
function createADB2CUser(userObj={}){
    let errorMsgs = []
    console.log(userObj)
    console.log(typeof(userObj))
    if(userObj['mail'] == undefined) {
        errorMsgs.push("mail parameter missing. \r\n");
    }
    if (!userObj['givenName']) {
        errorMsgs.push("givenName parameter is missing. \r\n");
    }
    if (userObj['surname'] == undefined) {
        errorMsgs.push("surname parameter is missing. \r\n");
    }
    if (userObj['employeeId'] == undefined) {
        errorMsgs.push("Unique ID parameter is missing. \r\n");
    }

    if (errorMsgs.length > 0) {
        let error = '';
        for (let item of errorMsgs) {
            error = error + item
        }
        alert(error);
        return;
    }
    const url = 'https://adb2c-user-management.azurewebsites.net/api/createUser?code=4lGsxICmUpsfjpoPwNaIp3ojOYI1bXC6Bjw2vstmAcjGy/Zo1DVi3g==';
    let xmlHttpRequest = new XMLHttpRequest();
    xmlHttpRequest.open("POST", url);
    xmlHttpRequest.setRequestHeader("Content-Type", "application/json");
    xmlHttpRequest.onreadystatechange = function(){
        if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200) {
            // todo: need to process result and store Azure ID to database
            console.log(xmlHttpRequest.responseText);
            alert('Azure AD User profile created successfully.')
        }
        if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status >= 400){
            // array of error messages
            const serverMsgs = JSON.parse(xmlHttpRequest.responseText);

            let displayErrors = 'There was an error processing your request.';
            for(let msg of serverMsgs) {
                displayErrors = displayErrors + msg + "\r\n";
            }
            alert(displayErrors);
        }

    }
    try {
        xmlHttpRequest.send(JSON.stringify(userObj))
    } catch(e) {
        console.log(e);
        alert('Network error')
    }
}

/**
@description - Modify user profile attribute
@params - Microsoft Graph User Object<
                accountEnabled: boolean,
                businessPhones: string[],
                displayName: string,
                givenName: string,
                id: string,
                jobTitle: string,
                mail: string,
                mobilePhone: string,
                officeLocation: string,
                preferredLanguage: string,
                surname: string,
                city: string,
                country: string,
                department: string,
                displayName: string,
                faxNumber: string,
                jobTitle: string,
                mailNickName: string,
                state: string,
                streetAddress: string
                employeeId: string >
*/

function editADB2CUser(userObj){
	fetch('https://adb2c-user-management.azurewebsites.net/api/updateUser?code=/hrm29o7ZJQAzFW4mQogQfagC16RDOPpniRzvWBJgKbSrKzvpwzADg==', {
	     headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
	    method: 'post',
	    body: JSON.stringify(userObj)
	  }).then(function(response) {
	    console.log(response);
	    return response.json();
	  }).then(function(data) {
	    alert("Success!");
     }).catch(function(e) {
        console.log(e);
        alert("Error!");
     });

}